<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>html表格自动合并</title>
      <link href="/2018/02/26/html%E8%A1%A8%E6%A0%BC%E8%87%AA%E5%8A%A8%E5%90%88%E5%B9%B6/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">万恶的产品设计一个动态表格合并的功能，曾经实现了一版运用js进行dom元素的拼接，发现代码量好大，</span><br><span class="line">后来产品再次设计了类似表格，复用之前代码感觉心好累，所以我就花十分钟仔细想了下，得出下面的解决方案。</span><br><span class="line">最终效果为 https://goddywu.github.io/html/demo/table_combine.html</span><br><span class="line">源码地址 https://github.com/Goddywu/html/blob/master/demo/table_combine.html</span><br></pre></td></tr></table></figure><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>想象一个情景，我们需要记录用户的操作，并展示出来，用户在相邻时间点做的同样操作，我们希望它们占据同一个格子。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>如果我们希望做一个3X2的表格，第二列合并前两格，那么我们的HTML代码将是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;1行1列&lt;/td&gt;</span><br><span class="line">    &lt;td rowspan=&quot;2&quot;&gt;第2列前两格&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;2行1列&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;3行1列&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;3行2列&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;table&gt;</span><br></pre></td></tr></table></figure></li><li><p>观察需要合并的第二列，合并前我们每个行元素tr内需要有第二列的td元素，假设1代表存在，那么第二列的td存在情况为 <code>[1, 1, 1]</code></p></li><li>观察合并后的第二列的td元素存在情况，为 <code>[1, 0, 1]</code></li><li>如果将rowspan的值代替掉第一个td元素，那么我们得到的数组为 <code>[2, 0, 1]</code>，数组名称设置为temp</li><li>有了这个数组就好办了，我们可以用vue的v-on绑定rowspan，用v-if来去掉例如第二行不需要的第二个td元素。</li><li><p>数据为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#已知数据</span><br><span class="line">data = [</span><br><span class="line">  [&apos;2018-01-01&apos;, &apos;买包子&apos;],</span><br><span class="line">  [&apos;2018-01-02&apos;, &apos;吃包子&apos;],</span><br><span class="line">  [&apos;2018-01-03&apos;, &apos;吃包子&apos;]</span><br><span class="line">]</span><br><span class="line">#我们需要计算出的数组</span><br><span class="line">array = [2, 0, 1]</span><br></pre></td></tr></table></figure></li><li><p>我们的代码将是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr v-for=&apos;(i, index) in data&apos;&gt;</span><br><span class="line">    &lt;td&gt;</span><br><span class="line">      &#123;&#123;i[0]&#125;&#125;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">    &lt;td v-if=&apos;temp[index] != 0&apos;&gt;</span><br><span class="line">      &#123;&#123;i[1]&#125;&#125;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="接下来，就是核心：如何得出数组array"><a href="#接下来，就是核心：如何得出数组array" class="headerlink" title="接下来，就是核心：如何得出数组array"></a>接下来，就是核心：如何得出数组array</h2><blockquote><p>思路：<br>建立一个temp作缓存变量，count作为计数器，遍历data数组，如果值与temp相同，则计数器加1，如果不同，则temp值赋值为当前值，并且计数器重置。<img src="http://upload-images.jianshu.io/upload_images/7691672-a1c0a070456fedd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p></blockquote><p>所有代码戳<a href="https://github.com/Goddywu/html/blob/master/demo/table_combine.html" target="_blank" rel="noopener">链接</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://gitlab.com/users/Goddy/projects" target="_blank" rel="noopener">我自己的gitlab账号</a></li><li><a href="https://github.com/Goddywu?tab=repositories" target="_blank" rel="noopener">我自己的github账号</a></li></ul>]]></content>
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>echarts的事件引入（一）</title>
      <link href="/2018/02/25/echarts%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BC%95%E5%85%A5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">序：</span><br><span class="line">公司一直在强调`结果导向`，那我就先放最终结果的链接吧。</span><br><span class="line">在线访问：https://goddy.gitlab.io/line-chart-event/#/</span><br><span class="line">源码地址：https://gitlab.com/Goddy/line-chart-event</span><br><span class="line">这个系列主要解决了折线图引入事件的需求，需要读者有一定echarts的基础。</span><br><span class="line">项目中我已经封装好了事件与折线图融合的方法，我们只需要引入js文件即可，下一个篇章我来说明下我封装的内容。</span><br><span class="line">此篇主要讲解虚拟的业务情景以及在vue项目中如何使用封装的js文件。</span><br></pre></td></tr></table></figure><h2 id="假设情景"><a href="#假设情景" class="headerlink" title="假设情景"></a>假设情景</h2><p>对比南通和石家庄分别两个区的降雨量，并将一些降雨量导致的事件体现到折线图上，点击事件可以跳到相应新闻网站。</p><h2 id="已知数据"><a href="#已知数据" class="headerlink" title="已知数据"></a>已知数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#时间</span><br><span class="line">[&apos;2017-12-21&apos;, &apos;2017-12-22&apos;, &apos;2017-12-23&apos;, &apos;2017-12-24&apos;, &apos;2017-12-25&apos;, &apos;2017-12-26&apos;, &apos;2017-12-27&apos;, &apos;2017-12-28&apos;, &apos;2017-12-29&apos;, &apos;2017-12-30&apos;, &apos;2017-12-31&apos;, &apos;2018-01-01&apos;, &apos;2018-01-02&apos;, &apos;2018-01-03&apos;, &apos;2018-01-04&apos;, &apos;2018-01-05&apos;, &apos;2018-01-06&apos;, &apos;2018-01-07&apos;]</span><br><span class="line">#南通A、B地区降雨量</span><br><span class="line">[1,2,3,4,5,6,7,5,3,9,12,4,2,4,6,3]</span><br><span class="line">[7,6,5,4,3,2,1,8,2,14,3,2,14,5,20]</span><br><span class="line">#石家庄A、B地区降雨量（单引号为未知）</span><br><span class="line">[1,2,3,4,5,6,7,7,2,2,4,6,7,3,2,1]</span><br><span class="line">[7,6,5,&apos;&apos;,4,3,2,1,4,8,8,2,3,2]</span><br><span class="line">#南通事件（单个例子）</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;事件(2)&apos;,  #标题</span><br><span class="line">   date: &apos;2017-12-26&apos;,  #日期</span><br><span class="line">   content: &apos;内容(1226)&apos;,  #内容</span><br><span class="line">   url: &apos;http://echarts.baidu.com/demo.html#grid-multiple&apos;  #事件网址</span><br><span class="line">&#125;</span><br><span class="line">#石家庄事件（同上）</span><br></pre></td></tr></table></figure><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>因为x轴数据即时间是连续不间断的，那么我们就可以根据x轴的两端的时间及它们的位置找到事件发生的时间对应x轴的位置。</p><h2 id="引入流程"><a href="#引入流程" class="headerlink" title="引入流程"></a>引入流程</h2><p><strong>1. 创建vue项目</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack my-project</span><br><span class="line">$ cd my-project</span><br><span class="line">$ cnpm install</span><br><span class="line">$ npm run dev</span><br><span class="line">$ cnpm install echarts --save</span><br></pre></td></tr></table></figure></p><p><strong>2. 引入封装的js文件</strong></p><ul><li><a href="https://gitlab.com/Goddy/line-chart-event/blob/master/src/assets/js/echartsEvent.js" target="_blank" rel="noopener">下载需要引入的echartsEvent.js文档</a></li><li>用一款你熟悉的编译器打开my-project</li><li>打开目录 <code>src/components/HelloWorld.vue</code></li><li>添加一个div<ul><li>🆔设置为<code>echarts</code>，用于识别</li><li>给此div添加css <code>#echarts {width: 1000px;margin:20px auto;}</code></li></ul></li><li>从js文件引入drawChart方法 <code>import {drawChart} from &#39;@/assets/js/echartsEvent&#39;</code></li><li>重点来了，数据配置<ul><li>数据概览<img src="http://upload-images.jianshu.io/upload_images/7691672-5ef469d2b47914fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li><li>折线图数据<img src="http://upload-images.jianshu.io/upload_images/7691672-f80c7d62b89c3676.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li><li>事件数据 （不做展示，可戳<a href="https://gitlab.com/Goddy/line-chart-event/blob/master/src/components/HelloWorld.vue" target="_blank" rel="noopener">链接</a>查看）</li></ul></li><li>添加drawChart的触发方法（编译好HTML后触发）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    drawChart(this.dataInput)</span><br><span class="line">  &#125;, 300)  #延迟触发</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此，你本地的样例生效了吗？</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul><li><a href="http://echarts.baidu.com/" target="_blank" rel="noopener">百度echarts官方文档</a></li><li><a href="https://cn.vuejs.org/index.html" target="_blank" rel="noopener">vue官方文档</a></li></ul>]]></content>
      
      <categories>
          
          <category> echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
            <tag> event </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用github子目录部署hexo个人博客</title>
      <link href="/2018/02/24/%E4%BD%BF%E7%94%A8github%E5%AD%90%E7%9B%AE%E5%BD%95%E9%83%A8%E7%BD%B2hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">序：</span><br><span class="line">作为一个孤家寡人，自称孤和寡人不为过吧。🙄</span><br><span class="line">寡人，在网上浏览了很多关于如何在github部署hexo的文章，</span><br><span class="line">但是都是在github为我们分配的二级域名根目录下，例如https://goddywu.github.io/</span><br><span class="line">如果我想blog子目录下部署呢（https://goddywu.github.io/blog/）</span><br><span class="line">读完这篇文章相信您就会了解。</span><br></pre></td></tr></table></figure><h2 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h2><p><strong>1. nodejs</strong><br>安装：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载页</a><br>验证：$ node -v,   $ npm -v 查看node及npm的版本<br><strong>2. git</strong><br>安装：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网下载页</a><br>验证：$ git –version 查看git的版本<br><strong>3. hexo-cli</strong><br>安装： $ cnpm install hexo-cli -g<br>验证：$ hexo -v 检查hexo的版本</p><h2 id="二、hexo-cli脚手架的使用"><a href="#二、hexo-cli脚手架的使用" class="headerlink" title="二、hexo-cli脚手架的使用"></a>二、hexo-cli脚手架的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd test  #打开存放项目的目录</span><br><span class="line">$ hexo init my-blog  #下载模版项目</span><br><span class="line">$ cd my-blog  #打开模板项目目录</span><br><span class="line">$ cnpm install  #下载相关依赖的包</span><br><span class="line">$ cnpm install hexo-deployer-git --save  #安装扩展包</span><br><span class="line">$ hexo generate / hexo g  #生成静态文件</span><br><span class="line">$ hexo server / hexo s  [-i 127.0.0.1] [-p 4000]#默认在本地的4000端口启动项目</span><br><span class="line">control + C  #终止运行</span><br><span class="line">$ hexo deploy / hexo d  #将.deploy目录部署 [到Github]</span><br><span class="line">$ hexo g -d / hexo d -g  #生成完毕后自动部署</span><br></pre></td></tr></table></figure><h2 id="三、操作步骤"><a href="#三、操作步骤" class="headerlink" title="三、操作步骤"></a>三、操作步骤</h2><h4 id="1-github操作"><a href="#1-github操作" class="headerlink" title="1. github操作"></a>1. github操作</h4><ul><li>github新建项目，名称为blog</li><li>修改已创建好的hexo项目中的_config.yml文件<img src="http://upload-images.jianshu.io/upload_images/7691672-10c91cc7e9e1f42c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><img src="http://upload-images.jianshu.io/upload_images/7691672-6de8aa1b0c8c5989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li><li>终端执行 $ hexo g -d</li><li>打开github我们的项目地址</li><li>选择setting</li><li>找到GitHub Pages勾选master branch</li></ul><p>至此，博客就可以访问了，示例网址：<br>  <a href="https://goddywu.github.io/blog/">https://goddywu.github.io/blog/</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">node官网</a></li><li><a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程node趴</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">git官方网址</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官网</a></li></ul>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用gitlab部署hexo</title>
      <link href="/2018/02/24/%E4%BD%BF%E7%94%A8gitlab%E9%83%A8%E7%BD%B2hexo/"/>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为喜欢gitlab，希望通过gitlab pages部署hexo。</span><br><span class="line">我们一般在本地打包好本地文件再放置到github远程仓库上，</span><br><span class="line">然而gitlab部署博客，需要在服务器端完成生成和部署。</span><br></pre></td></tr></table></figure><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>git</li><li>hexo</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>在gitlab新建项目blog</li><li><p>本地新建hexo项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd test  #打开存放项目的目录</span><br><span class="line">$ hexo init my-blog  #下载模版项目</span><br><span class="line">$ cd my-blog  #打开模板项目目录</span><br><span class="line">$ cnpm install  #下载相关依赖的包</span><br><span class="line">$ cnpm install hexo-deployer-git --save  #安装扩展包</span><br></pre></td></tr></table></figure></li><li><p>将本地项目添加至远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd my-blog  #打开项目目录</span><br><span class="line">$ git init  #设置项目目录为git仓库</span><br><span class="line">$ git remote add origin git@gitlab.com:Goddy/blog.git  #连接远程仓库</span><br><span class="line">$ git add .  #添加文件</span><br><span class="line">$ git commit -m &apos;msg&apos;  #添加注释并合并至本地git仓库</span><br><span class="line">$ git push  #提交至远程仓库</span><br></pre></td></tr></table></figure></li><li><p>添加.gitlab-ci.yml部署文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">image: node:4.2.2</span><br><span class="line"></span><br><span class="line">pages:</span><br><span class="line">  cache:</span><br><span class="line">    paths:</span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line">  script:</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line">  - hexo deploy</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">    - public</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure></li></ol><p><em>注：gitlab-ci全称是gitlab continuous integration的意思，就是持续集成。每次在我们push到gitlab的时候，都会触发此脚本</em></p><ol><li>修改项目里_config.yml文件</li></ol><ul><li>url设置为：<a href="https://goddy.gitlab.io/blog" target="_blank" rel="noopener">https://goddy.gitlab.io/blog</a></li><li>root设置为：/blog/</li></ul><ol><li>再次提交后查看setting里pages，已可以访问网址：<a href="https://goddy.gitlab.io/blog/" target="_blank" rel="noopener">https://goddy.gitlab.io/blog/</a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li></ol><ul><li><a href="http://blog.csdn.net/winter_evening/article/details/72353953" target="_blank" rel="noopener">CSDN Al’boy的博客</a></li><li><a href="https://gitlab.com/pages/hexo" target="_blank" rel="noopener">gitlab搭载hexo的开源项目</a></li></ul>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gitlab部署vue项目</title>
      <link href="/2018/02/24/gitlab%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">序：</span><br><span class="line">gitlab方便之处在于它可以帮你在服务器端进行软件的打包、发布，</span><br><span class="line">我们无需在本地进行代码的压缩。</span><br><span class="line">vue-ci脚手架生产的模版，如果想使用github pages，</span><br><span class="line">我们需要在本地执行npm run build，将dist文件夹下的内容提交到远程仓库。</span><br><span class="line">然而，gitlab就没有这个必要了。</span><br><span class="line">示例网址：https://goddy.gitlab.io/vue-gitlab</span><br></pre></td></tr></table></figure><h3 id="1-本地使用vue-ci创建好模版项目"><a href="#1-本地使用vue-ci创建好模版项目" class="headerlink" title="1.本地使用vue-ci创建好模版项目"></a>1.本地使用vue-ci创建好模版项目</h3><ul><li><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">官网教程</a><h3 id="2-在项目根目录新建-gitlab-ci-yml"><a href="#2-在项目根目录新建-gitlab-ci-yml" class="headerlink" title="2.在项目根目录新建.gitlab-ci.yml"></a>2.在项目根目录新建.gitlab-ci.yml</h3></li><li>$ touch .gitlab-ci.yml<h3 id="3-在-gitlab-ci-yml添加打包、部署的流程"><a href="#3-在-gitlab-ci-yml添加打包、部署的流程" class="headerlink" title="3.在.gitlab-ci.yml添加打包、部署的流程"></a>3.在.gitlab-ci.yml添加打包、部署的流程</h3></li><li><p>方法1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#build过程</span><br><span class="line">build:</span><br><span class="line">  stage: build</span><br><span class="line">  image: node:9.4.0</span><br><span class="line">  cache:</span><br><span class="line">    paths:</span><br><span class="line">    - node_modules/</span><br><span class="line">  script:</span><br><span class="line">  - npm install</span><br><span class="line">  - npm run build</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">    - dist</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br><span class="line"></span><br><span class="line">#发布过程</span><br><span class="line">pages:</span><br><span class="line">  stage: deploy</span><br><span class="line">  image: alpine:latest</span><br><span class="line">  script:</span><br><span class="line">  - mkdir public</span><br><span class="line">  - mv dist/* public</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">    - public</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure></li><li><p>方法2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#打包和发布一起执行</span><br><span class="line">image: node:9.4.0</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">  cache:</span><br><span class="line">    paths:</span><br><span class="line">    - node_modules/</span><br><span class="line">  script:</span><br><span class="line">  - npm install</span><br><span class="line">  - npm run build</span><br><span class="line">  - mkdir public</span><br><span class="line">  - mv dist/* public</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">    - public</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure></li></ul><p><em>p.s.   值得注意的一点是，vue-ci创建的模版有一个缺陷，在config/idex.js文件里，module.exports的build模块中的assetsPublicPath应设置为相对路径’./‘。否则打包后的css及js可能找不到对应路径</em></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
